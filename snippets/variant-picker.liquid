{%- comment -%}
----------------------------------------------------------------------------------------------------------------------
VARIANT PICKER
----------------------------------------------------------------------------------------------------------------------

Render the variant picker option selectors.

********************************************
Supported variables
********************************************

* product: the product for which to render the selector (required)
* form_id: the ID of the form to which the variant picker belongs (required)
* update_url: if set to true, the URL is updated when the variant changes (usually used for product page)
* hide_sold_out_variants: if set to true, the sold out or unavailable variants are hidden
* hide_size_chart: if set to true, size chart is always hidden
* force_dropdown_as_block: if set to true, the dropdown selectors are replaced by blocks, which is useful for quick buy where dropdown are not convenient to use
* block: the block itself, for theme-specific options (such as selector types)
{%- endcomment -%}

{%- assign color_label_list = 'general.label.color' | t | replace: ', ', ',' | downcase | split: ',' -%}
{%- assign size_label_list = 'general.label.size' | t | replace: ', ', ',' | downcase | split: ',' -%}
{%- assign variant_image_options = block.settings.variant_image_options | replace: ', ', ',' | downcase | split: ',' -%}

{%- comment -%} Check if this is an underwear product {%- endcomment -%}
{%- assign is_underwear = false -%}
{%- if product.template_suffix == 'underwear' or product.type == 'Underwear' -%}
  {%- assign is_underwear = true -%}
{%- endif -%}

{%- unless product.has_only_default_variant -%}
  <variant-picker class="variant-picker" section-id="{{ section.id }}" handle="{{ product.handle }}" form-id="{{ form_id }}" {% if update_url %}update-url{% endif %}>
    {%- comment -%}
    The variant data is outputted as a JSON, which allows the theme to emit an event with the data when the variant changes. This must not be removed.
    {%- endcomment -%}
    <script data-variant type="application/json">
      {{- product.selected_or_first_available_variant | json -}}
    </script>

    {%- for option in product.options_with_values -%}
      {% liquid
        assign option_downcase = option.name | downcase
        assign resolved_option_selector_style = block.settings.selector_style

        assign swatch_count = option.values | map: 'swatch' | compact | size

        if swatch_count > 0 and block.settings.swatch_selector_style != 'none'
          # Use the swatch selector type only if we have at least one swatch and a supported swatch selector type
          assign resolved_option_selector_style = block.settings.swatch_selector_style
        endif

        # Implementation note: if the option value has no native swatch, BUT that the option name matches a hardcoded list of color names,
        # we fallback to the legacy config-based system. This allows to keep compatibility with stores that were using the config-based, and
        # allow those merchants to upgrade to the new system at their own pace.
        if swatch_count == 0 and color_label_list contains option_downcase and block.settings.swatch_selector_style != 'none'
          assign resolved_option_selector_style = block.settings.swatch_selector_style
        endif

        if resolved_option_selector_style == 'dropdown' and force_dropdown_as_block
          assign resolved_option_selector_style = 'block'
        endif

        if variant_image_options contains option_downcase
          assign resolved_option_selector_style = 'variant_image'
        endif
      %}

      <fieldset class="variant-picker__option">
        <div class="variant-picker__option-info">
          <div class="h-stack gap-2">
            <legend class="text-subdued">{{ option.name }}:</legend>
            <span>{{ option.selected_value }}</span>
          </div>

          {%- if hide_size_chart != true and block.settings.size_chart_page != blank and size_label_list contains option_downcase -%}
            {%- capture drawer_id -%}size-chart-{{ option.position }}-{{ form_id }}{%- endcapture -%}

            <button type="button" class="text-sm text-subdued" aria-controls="{{ drawer_id | escape }}" aria-expanded="false">
              <span class="link">{{ 'product.general.size_chart' | t }}</span>
            </button>

            <x-drawer id="{{ drawer_id }}" class="drawer drawer--lg">
              <span class="h5" slot="header">{{ block.settings.size_chart_page.title }}</span>

              <div class="prose">
                {{- block.settings.size_chart_page.content -}}
              </div>
            </x-drawer>
          {%- endif -%}
        </div>

        {%- comment -%} Special handling for Size option in underwear products {%- endcomment -%}
        {%- if is_underwear and option_downcase == 'size' -%}
          {%- comment -%} Get UK size mappings {%- endcomment -%}
          {%- assign uk_mappings = shop.metaobjects.uk_size_mapping.values -%}
          
          <div class="underwear-size-tabs">
            <div class="size-tab-headers">
              <button type="button" class="size-tab-header size-tab-header--active" data-tab="scoop">
                SCOOP
              </button>
              <button type="button" class="size-tab-header" data-tab="uk">
                UK
              </button>
            </div>
            
            <div class="size-tab-content">
              <div class="size-tab-panel size-tab-panel--active" data-tab="scoop">
                <div class="variant-picker__option-values gap-4">
                  {%- assign name = form_id | append: '-option' | append: option.position -%}
                  {%- for option_value in option.values -%}
                    {%- render 'option-value', type: 'block', form: form_id, option_value: option_value, param_name: name, option_position: option.position, hide_if_disabled: hide_sold_out_variants, reload_page_for_combined_products: update_url, id_prefix: forloop.index -%}
                  {%- endfor -%}
                </div>
              </div>
              
              <div class="size-tab-panel" data-tab="uk">
                <div class="variant-picker__option-values gap-4">
                  {%- comment -%} Loop through SCOOP sizes in order and find corresponding UK sizes {%- endcomment -%}
                  {%- for option_value in option.values -%}
                    {%- assign scoop_size = option_value.name -%}
                    {%- assign corresponding_uk_size = blank -%}
                    {%- comment -%} Find the corresponding UK size for this SCOOP size {%- endcomment -%}
                    {%- for mapping in uk_mappings -%}
                      {%- if mapping.size == scoop_size -%}
                        {%- assign corresponding_uk_size = mapping.uk_size -%}
                        {%- break -%}
                      {%- endif -%}
                    {%- endfor -%}
                    
                    {%- if corresponding_uk_size != blank -%}
                      <button type="button" class="uk-size-option block-swatch" 
                              data-scoop-size="{{ scoop_size }}"
                              data-uk-size="{{ corresponding_uk_size }}"
                              data-option-value-id="{{ option_value.id }}"
                              {% if option_value.selected %}data-selected="true"{% endif %}>
                        <span>{{ corresponding_uk_size }}</span>
                      </button>
                    {%- endif -%}
                  {%- endfor -%}
                </div>
              </div>
            </div>
          </div>
        {%- else -%}

        {%- if resolved_option_selector_style == 'dropdown' -%}
          {%- capture popover_id -%}popover-variant-picker-{{ section.id }}-{{ product.id }}-{{ option.position }}{%- endcapture -%}

          <div class="relative">
            <button type="button" class="select" aria-controls="{{ popover_id }}" aria-expanded="false">
              <span id="{{ popover_id }}-selected-value">{{- option.selected_value -}}</span>
              {%- render 'icon' with 'chevron-bottom', class: 'select-chevron' -%}
            </button>

            <x-popover id="{{ popover_id }}" class="popover" initial-focus="[aria-selected='true']" close-on-listbox-select anchor-horizontal="start" anchor-vertical="end">
              <p class="h5" slot="title">{{ option.name }}</p>

              {%- assign param_name = form_id | append: '-option' | append: option.position -%}

              <div data-option-selector class="popover-listbox">
                {%- for option_value in option.values -%}
                  {%- if hide_sold_out_variants == false or option_value.available or option_value.selected -%}
                    {%- if update_url and option_value.product_url != blank -%}
                      {%- if option_value.selected -%}
                        <input class="sr-only" type="radio" id="{{ param_name }}-{{ option_value.id }}" form="{{ form_id }}" name="{{ param_name }}" data-option-position="{{ option.position }}" value="{{ option_value.id }}" checked>
                      {%- endif -%}

                      <a href="{{ option_value.variant.url | default: option_value.product_url }}" class="popover-listbox__option {% unless option_value.available %}is-disabled{% endunless %}">
                        {{- option_value.name -}}
                      </a>
                    {%- else -%}
                      <label class="popover-listbox__option {% unless option_value.available %}is-disabled{% endunless %}" for="{{ param_name }}-{{ option_value.id }}">
                        <input class="sr-only" form="{{ form_id }}" type="radio" id="{{ param_name }}-{{ option_value.id }}" name="{{ param_name }}" {% if option_value.product_url != blank %}data-product-url="{{ option_value.product_url | escape }}"{% endif %} data-option-position="{{ option.position }}" value="{{ option_value.id }}" {% if option_value.selected %}checked{% endif %}>

                        {{- option_value.name -}}
                      </label>
                    {%- endif -%}
                  {%- endif -%}
                {%- endfor -%}
              </div>
            </x-popover>
          </div>
        {%- else -%}
          <div {% unless block.settings.stack_blocks %}class="scroll-area bleed sm:unbleed"{% endunless %}>
            <div class="variant-picker__option-values {% if block.settings.stack_blocks %}wrap{% else %}scroll-area bleed sm:unbleed{% endif %} {% if resolved_option_selector_style == 'swatch' and settings.color_swatch_style == 'rectangle' %}variant-picker__option-values--color gap-4{% else %}gap-4{% endif %}">
              {% liquid
                assign name = form_id | append: '-option' | append: option.position

                for option_value in option.values
                  case resolved_option_selector_style
                    when 'variant_image'
                      render 'option-value', type: 'thumbnail', form: form_id, option_value: option_value, param_name: name, option_position: option.position, hide_if_disabled: hide_sold_out_variants, reload_page_for_combined_products: update_url, id_prefix: forloop.index, bordered: true
                    when 'swatch'
                      render 'option-value', type: 'swatch', form: form_id, option_value: option_value, param_name: name, option_position: option.position, hide_if_disabled: hide_sold_out_variants, reload_page_for_combined_products: update_url, id_prefix: forloop.index
                    when 'block'
                      render 'option-value', type: 'block', form: form_id, option_value: option_value, param_name: name, option_position: option.position, hide_if_disabled: hide_sold_out_variants, reload_page_for_combined_products: update_url, id_prefix: forloop.index
                    when 'block_swatch'
                      render 'option-value', type: 'block', form: form_id, option_value: option_value, param_name: name, option_position: option.position, show_swatch: true, hide_if_disabled: hide_sold_out_variants, reload_page_for_combined_products: update_url, id_prefix: forloop.index
                  endcase
                endfor
              %}
            </div>
          </div>
        {%- endif -%}
        {%- endif -%}
      </fieldset>
    {%- endfor -%}
  </variant-picker>

  {%- comment -%} JavaScript for underwear size tabs {%- endcomment -%}
  {%- if is_underwear -%}
  <script>
    // Function to initialize underwear size tabs
    function initializeUnderwearSizeTabs() {
      const sizeTabs = document.querySelectorAll('.underwear-size-tabs');
      
      sizeTabs.forEach(function(tabContainer) {
        // Skip if already initialized
        if (tabContainer.dataset.initialized === 'true') {
          return;
        }
        
        const headers = tabContainer.querySelectorAll('.size-tab-header');
        const panels = tabContainer.querySelectorAll('.size-tab-panel');
        const ukSizeOptions = tabContainer.querySelectorAll('.uk-size-option');
        
        // Tab switching functionality
        headers.forEach(function(header) {
          header.addEventListener('click', function() {
            const targetTab = this.getAttribute('data-tab');
            
            // Update active header
            headers.forEach(h => h.classList.remove('size-tab-header--active'));
            this.classList.add('size-tab-header--active');
            
            // Update active panel
            panels.forEach(p => {
              p.classList.remove('size-tab-panel--active');
              p.style.display = 'none';
            });
            
            const targetPanel = tabContainer.querySelector(`.size-tab-panel[data-tab="${targetTab}"]`);
            if (targetPanel) {
              targetPanel.classList.add('size-tab-panel--active');
              targetPanel.style.display = 'block';
            }
          });
        });
        
           // UK size option click handling
           ukSizeOptions.forEach(function(option) {
             option.addEventListener('click', function(e) {
               // Prevent tab switching - only handle size selection
               e.stopPropagation();
               e.preventDefault();
               
               const optionValueId = this.getAttribute('data-option-value-id');
               const scoopSize = this.getAttribute('data-scoop-size');
               
               // Temporarily disable all tab header clicks
               headers.forEach(function(header) {
                 header.style.pointerEvents = 'none';
               });
               
               // Find the corresponding SCOOP size option
               const scoopOption = tabContainer.querySelector(`input[value="${optionValueId}"]`);
               
               if (scoopOption) {
                 // Try a different approach - find the label and click it instead
                 const scoopLabel = tabContainer.querySelector(`label[for="${scoopOption.id}"]`);
                 
                 if (scoopLabel) {
                   // Click the label instead of the input
                   scoopLabel.click();
                 } else {
                   // Fallback to direct state change
                   scoopOption.checked = true;
                   const changeEvent = new Event('change', { bubbles: true });
                   scoopOption.dispatchEvent(changeEvent);
                 }
               }
               
               // Re-enable tab header clicks after a delay
               setTimeout(function() {
                 headers.forEach(function(header) {
                   header.style.pointerEvents = 'auto';
                 });
               }, 200);
               
               // Update visual state
               ukSizeOptions.forEach(opt => opt.classList.remove('selected'));
               this.classList.add('selected');
             });
           });
        
        // Sync UK sizes when SCOOP sizes change
        const scoopOptions = tabContainer.querySelectorAll('input[type="radio"]');
        scoopOptions.forEach(function(option) {
          option.addEventListener('change', function() {
            if (this.checked) {
              const optionValueId = this.value;
              const correspondingUkOption = tabContainer.querySelector(`[data-option-value-id="${optionValueId}"]`);
              
              if (correspondingUkOption) {
                ukSizeOptions.forEach(opt => opt.classList.remove('selected'));
                correspondingUkOption.classList.add('selected');
              }
            }
          });
        });
        
        // Initialize selected state
        const selectedScoopOption = tabContainer.querySelector('input[type="radio"]:checked');
        if (selectedScoopOption) {
          const optionValueId = selectedScoopOption.value;
          const correspondingUkOption = tabContainer.querySelector(`[data-option-value-id="${optionValueId}"]`);
          if (correspondingUkOption) {
            correspondingUkOption.classList.add('selected');
          }
        }
        
        // Ensure initial panel visibility
        const activePanel = tabContainer.querySelector('.size-tab-panel--active');
        if (activePanel) {
          activePanel.style.display = 'block';
        }
        
        // Mark as initialized
        tabContainer.dataset.initialized = 'true';
      });
    }
    
    // Initialize on DOM ready
    document.addEventListener('DOMContentLoaded', initializeUnderwearSizeTabs);
    
    // Re-initialize on AJAX content updates
    document.addEventListener('shopify:section:load', initializeUnderwearSizeTabs);
    document.addEventListener('shopify:section:reorder', initializeUnderwearSizeTabs);
    
    // Also listen for custom events that might indicate content updates
    document.addEventListener('variant:change', function() {
      setTimeout(initializeUnderwearSizeTabs, 100);
    });
    
    // Fallback: periodically check for new tabs (for aggressive AJAX)
    setInterval(function() {
      const uninitializedTabs = document.querySelectorAll('.underwear-size-tabs:not([data-initialized="true"])');
      if (uninitializedTabs.length > 0) {
        initializeUnderwearSizeTabs();
      }
    }, 1000);
  </script>
  {%- endif -%}
{%- endunless -%}